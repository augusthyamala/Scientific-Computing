#include <iostream>
#include <chrono>
#include <sstream>
#include <fstream>

void MatVec(size_t n, double* A, double* x, double* y){
  for( size_t i = 0; i < n; i++){
    y[i] = 0;
    for(size_t j = 0; j < n; j++)
      y[i] += A[i*n + j] * x[j];
}
}

void MatVec_bad(size_t n, double* A, double* x, double* y){
  for( size_t i = 0; i < n; i++)
    y[i] = 0;
  for( size_t j = 0; j < n; j++){
    for(size_t i = 0; i < n; i++)
      y[i] += A[i*n + j] * x[j];
  }
}

int main(int argc, char** argv){

 size_t n;
 std::istringstream(argv[1]) >> n;

 std::ofstream myfile;
 myfile.open("time.txt",std::ios_base::app);

 std::cout << "n is: " << n << std::endl;  
 // std::cout << "Input dimension:"<< std::endl;
 //std::cin >> n;
 double* A = new double[n * n];
 double* y = new double[n]; 
 double* x = new double[n];
 double* z = new double;

 for( size_t i = 0; i < n; i++){
   x[i] = 1;
   for(size_t j = 0; j < n; j++)
     A[i*n + j] = i;
 }
 std::chrono::time_point<std::chrono::high_resolution_clock> begin, end;
 begin = std::chrono::high_resolution_clock::now();
 MatVec(n, A, x, y);
 end = std::chrono::high_resolution_clock::now();
 std::cout << "Time consumed (MatVec): "
	   << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()
	   << std::endl;

 myfile << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()<<"    ";

 begin = std::chrono::high_resolution_clock::now();
 MatVec_bad(n, A, x, y);
 end = std::chrono::high_resolution_clock::now(); 
 std::cout << "Time consumed (MatVec_bad): "
	   << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()
	   << std::endl;

 myfile << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()<<'\n';
 myfile.close();

 delete[] A;
 delete[] x;
 delete[] y;
}
